# arp htype 1
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ cmp eq reg 1 0x00000100 ]

# arp htype != 1
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ cmp neq reg 1 0x00000100 ]

# arp htype 22
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ cmp eq reg 1 0x00001600 ]

# arp htype != 233
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ cmp neq reg 1 0x0000e900 ]

# arp htype 33-45
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ cmp gte reg 1 0x00002100 ]
  [ cmp lte reg 1 0x00002d00 ]

# arp htype != 33-45
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ cmp lt reg 1 0x00002100 ]
  [ cmp gt reg 1 0x00002d00 ]

# arp htype { 33, 55, 67, 88}
set%d test-arp 3
set%d test-arp 0
	element 00002100  : 0 [end]	element 00003700  : 0 [end]	element 00004300  : 0 [end]	element 00005800  : 0 [end]
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp htype { 33-55}
set%d test-arp 7
set%d test-arp 0
	element 00000000  : 1 [end]	element 00002100  : 0 [end]	element 00003800  : 1 [end]
arp test-arp input
  [ payload load 2b @ network header + 0 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp ptype 0x0800
arp test-arp input
  [ payload load 2b @ network header + 2 => reg 1 ]
  [ cmp eq reg 1 0x00000008 ]

# arp hlen 22
arp test-arp input
  [ payload load 1b @ network header + 4 => reg 1 ]
  [ cmp eq reg 1 0x00000016 ]

# arp hlen != 233
arp test-arp input
  [ payload load 1b @ network header + 4 => reg 1 ]
  [ cmp neq reg 1 0x000000e9 ]

# arp hlen 33-45
arp test-arp input
  [ payload load 1b @ network header + 4 => reg 1 ]
  [ cmp gte reg 1 0x00000021 ]
  [ cmp lte reg 1 0x0000002d ]

# arp hlen != 33-45
arp test-arp input
  [ payload load 1b @ network header + 4 => reg 1 ]
  [ cmp lt reg 1 0x00000021 ]
  [ cmp gt reg 1 0x0000002d ]

# arp hlen { 33, 55, 67, 88}
set%d test-arp 3
set%d test-arp 0
	element 00000021  : 0 [end]	element 00000037  : 0 [end]	element 00000043  : 0 [end]	element 00000058  : 0 [end]
arp test-arp input
  [ payload load 1b @ network header + 4 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp hlen { 33-55}
set%d test-arp 7
set%d test-arp 0
	element 00000000  : 1 [end]	element 00000021  : 0 [end]	element 00000038  : 1 [end]
arp test-arp input
  [ payload load 1b @ network header + 4 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp plen 22
arp test-arp input
  [ payload load 1b @ network header + 5 => reg 1 ]
  [ cmp eq reg 1 0x00000016 ]

# arp plen != 233
arp test-arp input
  [ payload load 1b @ network header + 5 => reg 1 ]
  [ cmp neq reg 1 0x000000e9 ]

# arp plen 33-45
arp test-arp input
  [ payload load 1b @ network header + 5 => reg 1 ]
  [ cmp gte reg 1 0x00000021 ]
  [ cmp lte reg 1 0x0000002d ]

# arp plen != 33-45
arp test-arp input
  [ payload load 1b @ network header + 5 => reg 1 ]
  [ cmp lt reg 1 0x00000021 ]
  [ cmp gt reg 1 0x0000002d ]

# arp plen { 33, 55, 67, 88}
set%d test-arp 3
set%d test-arp 0
	element 00000021  : 0 [end]	element 00000037  : 0 [end]	element 00000043  : 0 [end]	element 00000058  : 0 [end]
arp test-arp input
  [ payload load 1b @ network header + 5 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp plen { 33-55}
set%d test-arp 7
set%d test-arp 0
	element 00000000  : 1 [end]	element 00000021  : 0 [end]	element 00000038  : 1 [end]
arp test-arp input
  [ payload load 1b @ network header + 5 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp operation {nak, inreply, inrequest, rreply, rrequest, reply, request}
set%d test-arp 3
set%d test-arp 0
	element 0000000a  : 0 [end]	element 00000009  : 0 [end]	element 00000008  : 0 [end]	element 00000004  : 0 [end]	element 00000003  : 0 [end]	element 00000002  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ lookup reg 1 set set%d ]

# arp operation request
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]

# arp operation reply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]

# arp operation rrequest
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000003 ]

# arp operation rreply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000004 ]

# arp operation inrequest
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000008 ]

# arp operation inreply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000009 ]

# arp operation nak
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x0000000a ]

# arp operation reply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]

# arp operation != request
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]

# arp operation != reply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]

# arp operation != rrequest
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000003 ]

# arp operation != rreply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000004 ]

# arp operation != inrequest
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000008 ]

# arp operation != inreply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000009 ]

# arp operation != nak
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x0000000a ]

# arp operation != reply
arp test-arp input
  [ payload load 2b @ network header + 6 => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]

