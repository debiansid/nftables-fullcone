# meta priority root
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0xffffffff ]

# meta priority none
netdev test-netdev ingress 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta priority bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0xbcaddadc ]

# meta priority aabb:0
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0xaabb0000 ]

# meta priority != bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0xbcaddadc ]

# meta priority != aabb:0
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0xaabb0000 ]

# meta priority bcad:dada-bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp gte reg 1 0xdadaadbc ]
  [ cmp lte reg 1 0xdcdaadbc ]

# meta priority != bcad:dada-bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp lt reg 1 0xdadaadbc ]
  [ cmp gt reg 1 0xdcdaadbc ]

# meta priority {bcad:dada, bcad:dadc, aaaa:bbbb}
__set%d test-ip4 3
__set%d test-ip4 0
	element bcaddada  : 0 [end]	element bcaddadc  : 0 [end]	element aaaabbbb  : 0 [end]
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ lookup reg 1 set __set%d ]

# meta priority set cafe:beef
ip test-ip4 input 
  [ immediate reg 1 0xcafebeef ]
  [ meta set priority with reg 1 ]

# meta random gt 1000000
ip test-ip4 input 
  [ meta load prandom => reg 1 ]
  [ cmp gt reg 1 0x40420f00 ]

# meta random gt 1000000
ip6 test-ip6 input 
  [ meta load prandom => reg 1 ]
  [ cmp gt reg 1 0x40420f00 ]

# meta random gt 1000000
inet test-inet input 
  [ meta load prandom => reg 1 ]
  [ cmp gt reg 1 0x40420f00 ]

# meta random gt 1000000
arp test-arp input 
  [ meta load prandom => reg 1 ]
  [ cmp gt reg 1 0x40420f00 ]

# meta random gt 1000000
bridge test-bridge input 
  [ meta load prandom => reg 1 ]
  [ cmp gt reg 1 0x40420f00 ]

# meta random gt 1000000
netdev test-netdev ingress 
  [ meta load prandom => reg 1 ]
  [ cmp gt reg 1 0x40420f00 ]

# meta priority 1:1234
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00011234 ]

# meta priority 0x87654321
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 0x87654321
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 0x87654321
ip6 test-ip6 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 0x87654321
inet test-inet input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 0x87654321
arp test-arp input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 0x87654321
bridge test-bridge input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 0x87654321
netdev test-netdev ingress 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
ip6 test-ip6 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
inet test-inet input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
arp test-arp input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
bridge test-bridge input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 2271560481
netdev test-netdev ingress 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x87654321 ]

# meta priority 1:1234
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]

# meta priority bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta priority aabb:0
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta priority != bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta priority != aabb:0
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta priority set cafe:beef
ip test-ip4 input 
  [ immediate reg 1 0x00000000 ]
  [ meta set priority with reg 1 ]

# meta priority 1:1234
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta priority bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta priority aabb:0
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta priority != bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta priority != aabb:0
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta priority bcad:dada-bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp gte reg 1 0x00000000 ]
  [ cmp lte reg 1 0xfd7f0000 ]

# meta priority != bcad:dada-bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp lt reg 1 0x00000000 ]
  [ cmp gt reg 1 0xff7f0000 ]

# meta priority set cafe:beef
ip test-ip4 input 
  [ immediate reg 1 0x00007fff ]
  [ meta set priority with reg 1 ]

# meta priority 1:1234
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0x12350000 ]

# meta priority bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp eq reg 1 0xfefd0000 ]

# meta priority != bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ cmp neq reg 1 0xfefd0000 ]

# meta priority {bcad:dada, bcad:dadc, aaaa:bbbb}
__set%d test-ip4 3
__set%d test-ip4 0
	element feff0000  : 0 [end]	element fefd0000  : 0 [end]	element bbbb0000  : 0 [end]
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ lookup reg 1 set __set%d ]

# meta priority set cafe:beef
ip test-ip4 input 
  [ immediate reg 1 0xfeff0000 ]
  [ meta set priority with reg 1 ]

# meta skuid {"bin", "root", "daemon"} accept
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
ip test-ip4 input 
  [ meta load skuid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skuid {"bin", "root", "daemon"} accept
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
ip6 test-ip6 input 
  [ meta load skuid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skuid {"bin", "root", "daemon"} accept
__set%d test-inet 3
__set%d test-inet 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
inet test-inet input 
  [ meta load skuid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skuid {"bin", "root", "daemon"} accept
__set%d test-arp 3
__set%d test-arp 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input 
  [ meta load skuid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skuid {"bin", "root", "daemon"} accept
__set%d test-bridge 3
__set%d test-bridge 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
bridge test-bridge input 
  [ meta load skuid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skuid {"bin", "root", "daemon"} accept
__set%d test-netdev 3
__set%d test-netdev 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
netdev test-netdev ingress 
  [ meta load skuid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skuid "root"
ip test-ip4 input 
  [ meta load skuid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skuid "root"
ip6 test-ip6 input 
  [ meta load skuid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skuid "root"
inet test-inet input 
  [ meta load skuid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skuid "root"
arp test-arp input 
  [ meta load skuid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skuid "root"
bridge test-bridge input 
  [ meta load skuid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skuid "root"
netdev test-netdev ingress 
  [ meta load skuid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skuid != "root"
ip test-ip4 input 
  [ meta load skuid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skuid != "root"
ip6 test-ip6 input 
  [ meta load skuid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skuid != "root"
inet test-inet input 
  [ meta load skuid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skuid != "root"
arp test-arp input 
  [ meta load skuid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skuid != "root"
bridge test-bridge input 
  [ meta load skuid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skuid != "root"
netdev test-netdev ingress 
  [ meta load skuid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skgid {"bin", "root", "daemon"} accept
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
ip test-ip4 input 
  [ meta load skgid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skgid {"bin", "root", "daemon"} accept
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
ip6 test-ip6 input 
  [ meta load skgid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skgid {"bin", "root", "daemon"} accept
__set%d test-inet 3
__set%d test-inet 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
inet test-inet input 
  [ meta load skgid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skgid {"bin", "root", "daemon"} accept
__set%d test-arp 3
__set%d test-arp 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input 
  [ meta load skgid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skgid {"bin", "root", "daemon"} accept
__set%d test-bridge 3
__set%d test-bridge 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
bridge test-bridge input 
  [ meta load skgid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skgid {"bin", "root", "daemon"} accept
__set%d test-netdev 3
__set%d test-netdev 0
	element 00000002  : 0 [end]	element 00000000  : 0 [end]	element 00000001  : 0 [end]
netdev test-netdev ingress 
  [ meta load skgid => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta skgid "root"
ip test-ip4 input 
  [ meta load skgid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skgid "root"
ip6 test-ip6 input 
  [ meta load skgid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skgid "root"
inet test-inet input 
  [ meta load skgid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skgid "root"
arp test-arp input 
  [ meta load skgid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skgid "root"
bridge test-bridge input 
  [ meta load skgid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skgid "root"
netdev test-netdev ingress 
  [ meta load skgid => reg 1 ]
  [ cmp eq reg 1 0x00000000 ]

# meta skgid != "root"
ip test-ip4 input 
  [ meta load skgid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skgid != "root"
ip6 test-ip6 input 
  [ meta load skgid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skgid != "root"
inet test-inet input 
  [ meta load skgid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skgid != "root"
arp test-arp input 
  [ meta load skgid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skgid != "root"
bridge test-bridge input 
  [ meta load skgid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta skgid != "root"
netdev test-netdev ingress 
  [ meta load skgid => reg 1 ]
  [ cmp neq reg 1 0x00000000 ]

# meta iif "eth0" accept
ip test-ip4 input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
ip6 test-ip6 input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
inet test-inet input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
arp test-arp input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
bridge test-bridge input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
netdev test-netdev ingress 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
ip test-ip4 input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
ip6 test-ip6 input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
inet test-inet input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
arp test-arp input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
bridge test-bridge input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif "eth0" accept
netdev test-netdev ingress 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
ip test-ip4 input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
ip6 test-ip6 input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
inet test-inet input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
arp test-arp input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
bridge test-bridge input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
netdev test-netdev ingress 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
ip test-ip4 input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
ip6 test-ip6 input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
inet test-inet input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
arp test-arp input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
bridge test-bridge input 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta iif != "eth0" accept
netdev test-netdev ingress 
  [ meta load iif => reg 1 ]
  [ cmp neq reg 1 0x00000002 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-inet 3
__set%d test-inet 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-arp 3
__set%d test-arp 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-bridge 3
__set%d test-bridge 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-netdev 3
__set%d test-netdev 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-inet 3
__set%d test-inet 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-arp 3
__set%d test-arp 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-bridge 3
__set%d test-bridge 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-netdev 3
__set%d test-netdev 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta iif lo
ip test-ip4 input 
  [ meta load iif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]

# meta oif lo
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]

# meta oif "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-inet 3
__set%d test-inet 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-arp 3
__set%d test-arp 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-bridge 3
__set%d test-bridge 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-netdev 3
__set%d test-netdev 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp eq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif != "lo" accept
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ cmp neq reg 1 0x00000001 ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip test-ip4 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
ip6 test-ip6 input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-inet 3
__set%d test-inet 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
inet test-inet input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-arp 3
__set%d test-arp 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
arp test-arp input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-bridge 3
__set%d test-bridge 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
bridge test-bridge input 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta oif {"eth0", "lo"} accept
__set%d test-netdev 3
__set%d test-netdev 0
	element 00000002  : 0 [end]	element 00000001  : 0 [end]
netdev test-netdev ingress 
  [ meta load oif => reg 1 ]
  [ lookup reg 1 set __set%d ]
  [ immediate reg 0 accept ]

# meta length != 33-45
ip test-ip4 input 
  [ meta load len => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x21000000 0x2d000000 ]

# meta length != 33-45
ip6 test-ip6 input 
  [ meta load len => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x21000000 0x2d000000 ]

# meta length != 33-45
inet test-inet input 
  [ meta load len => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x21000000 0x2d000000 ]

# meta length != 33-45
arp test-arp input 
  [ meta load len => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x21000000 0x2d000000 ]

# meta length != 33-45
bridge test-bridge input 
  [ meta load len => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x21000000 0x2d000000 ]

# meta length != 33-45
netdev test-netdev ingress 
  [ meta load len => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x21000000 0x2d000000 ]

# meta l4proto != 33-45
ip test-ip4 input 
  [ meta load l4proto => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 2, 1) ]
  [ range neq reg 1 0x00000021 0x0000002d ]

# meta l4proto != 33-45
ip6 test-ip6 input 
  [ meta load l4proto => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 2, 1) ]
  [ range neq reg 1 0x00000021 0x0000002d ]

# meta l4proto != 33-45
inet test-inet input 
  [ meta load l4proto => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 2, 1) ]
  [ range neq reg 1 0x00000021 0x0000002d ]

# meta l4proto != 33-45
arp test-arp input 
  [ meta load l4proto => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 2, 1) ]
  [ range neq reg 1 0x00000021 0x0000002d ]

# meta l4proto != 33-45
bridge test-bridge input 
  [ meta load l4proto => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 2, 1) ]
  [ range neq reg 1 0x00000021 0x0000002d ]

# meta l4proto != 33-45
netdev test-netdev ingress 
  [ meta load l4proto => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 2, 1) ]
  [ range neq reg 1 0x00000021 0x0000002d ]

# meta priority != bcad:dada-bcad:dadc
ip test-ip4 input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xdadaadbc 0xdcdaadbc ]

# meta priority != bcad:dada-bcad:dadc
ip6 test-ip6 input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xdadaadbc 0xdcdaadbc ]

# meta priority != bcad:dada-bcad:dadc
inet test-inet input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xdadaadbc 0xdcdaadbc ]

# meta priority != bcad:dada-bcad:dadc
arp test-arp input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xdadaadbc 0xdcdaadbc ]

# meta priority != bcad:dada-bcad:dadc
bridge test-bridge input 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xdadaadbc 0xdcdaadbc ]

# meta priority != bcad:dada-bcad:dadc
netdev test-netdev ingress 
  [ meta load priority => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xdadaadbc 0xdcdaadbc ]

# meta skuid != 2001-2005 accept
ip test-ip4 input 
  [ meta load skuid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skuid != 2001-2005 accept
ip6 test-ip6 input 
  [ meta load skuid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skuid != 2001-2005 accept
inet test-inet input 
  [ meta load skuid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skuid != 2001-2005 accept
arp test-arp input 
  [ meta load skuid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skuid != 2001-2005 accept
bridge test-bridge input 
  [ meta load skuid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skuid != 2001-2005 accept
netdev test-netdev ingress 
  [ meta load skuid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skgid != 2001-2005 accept
ip test-ip4 input 
  [ meta load skgid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skgid != 2001-2005 accept
ip6 test-ip6 input 
  [ meta load skgid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skgid != 2001-2005 accept
inet test-inet input 
  [ meta load skgid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skgid != 2001-2005 accept
arp test-arp input 
  [ meta load skgid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skgid != 2001-2005 accept
bridge test-bridge input 
  [ meta load skgid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta skgid != 2001-2005 accept
netdev test-netdev ingress 
  [ meta load skgid => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xd1070000 0xd5070000 ]
  [ immediate reg 0 accept ]

# meta cpu != 1-2
ip test-ip4 input 
  [ meta load cpu => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01000000 0x02000000 ]

# meta cpu != 1-2
ip6 test-ip6 input 
  [ meta load cpu => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01000000 0x02000000 ]

# meta cpu != 1-2
inet test-inet input 
  [ meta load cpu => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01000000 0x02000000 ]

# meta cpu != 1-2
arp test-arp input 
  [ meta load cpu => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01000000 0x02000000 ]

# meta cpu != 1-2
bridge test-bridge input 
  [ meta load cpu => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01000000 0x02000000 ]

# meta cpu != 1-2
netdev test-netdev ingress 
  [ meta load cpu => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01000000 0x02000000 ]

# meta cgroup != 1048577-1048578
ip test-ip4 input 
  [ meta load cgroup => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01001000 0x02001000 ]

# meta cgroup != 1048577-1048578
ip6 test-ip6 input 
  [ meta load cgroup => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01001000 0x02001000 ]

# meta cgroup != 1048577-1048578
inet test-inet input 
  [ meta load cgroup => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01001000 0x02001000 ]

# meta cgroup != 1048577-1048578
arp test-arp input 
  [ meta load cgroup => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01001000 0x02001000 ]

# meta cgroup != 1048577-1048578
bridge test-bridge input 
  [ meta load cgroup => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01001000 0x02001000 ]

# meta cgroup != 1048577-1048578
netdev test-netdev ingress 
  [ meta load cgroup => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x01001000 0x02001000 ]

