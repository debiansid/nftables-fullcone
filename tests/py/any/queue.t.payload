# queue
ip test-ip4 output
  [ queue num 0 ]

# queue num 2
ip test-ip4 output
  [ queue num 2 ]

# queue num 65535
ip test-ip4 output
  [ queue num 65535 ]

# queue num 2-3
ip test-ip4 output
  [ queue num 2-3 ]

# queue num 1-65535
ip test-ip4 output
  [ queue num 1-65535 ]

# queue num 4-5 fanout bypass
ip test-ip4 output
  [ queue num 4-5 bypass fanout ]

# queue num 4-5 fanout
ip test-ip4 output
  [ queue num 4-5 fanout ]

# queue num 4-5 bypass
ip test-ip4 output
  [ queue num 4-5 bypass ]

# queue to symhash mod 65536
ip
  [ hash reg 1 = symhash() % mod 65536 ]
  [ queue sreg_qnum 1 ]

# queue to jhash oif . meta mark mod 32
ip
  [ meta load oif => reg 2 ]
  [ meta load mark => reg 13 ]
  [ hash reg 1 = jhash(reg 2, 8, 0x0) % mod 32 ]
  [ queue sreg_qnum 1 ]

# queue flags bypass to numgen inc mod 65536
ip
  [ numgen reg 1 = inc mod 65536 ]
  [ queue sreg_qnum 1 bypass ]

# queue flags bypass to oifname map { "eth0" : 0, "ppp0" : 2, "eth1" : 2 }
__map%d test-ip4 b size 3
__map%d test-ip4 0
	element 30687465 00000000 00000000 00000000  : 00000000 0 [end]	element 30707070 00000000 00000000 00000000  : 00000002 0 [end]	element 31687465 00000000 00000000 00000000  : 00000002 0 [end]
ip
  [ meta load oifname => reg 1 ]
  [ lookup reg 1 set __map%d dreg 1 ]
  [ queue sreg_qnum 1 bypass ]

# queue to 2
ip
  [ queue num 2 ]

# queue to 65535
ip
  [ queue num 65535 ]

# queue flags bypass to 65535
ip
  [ queue num 65535 bypass ]

# queue flags bypass to 1-65535
ip
  [ queue num 1-65535 bypass ]

# queue flags bypass,fanout to 1-65535
ip
  [ queue num 1-65535 bypass fanout ]

# queue to 1-65535
ip
  [ queue num 1-65535 ]
