# ct expiration 30
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ cmp eq reg 1 0x00007530 ]

# ct expiration 22
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ cmp eq reg 1 0x000055f0 ]

# ct expiration != 233
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ cmp neq reg 1 0x00038e28 ]

# ct expiration 33-45
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp gte reg 1 0xe8800000 ]
  [ cmp lte reg 1 0xc8af0000 ]

# ct expiration != 33-45
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp lt reg 1 0xe8800000 ]
  [ cmp gt reg 1 0xc8af0000 ]

# ct expiration {33, 55, 67, 88}
__set%d test-ip4 3
__set%d test-ip4 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-ip4 7
__set%d test-ip4 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct expiration 33-45
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp gte reg 1 0xe8800000 ]
  [ cmp lte reg 1 0xc8af0000 ]

# ct expiration 33-45
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp gte reg 1 0xe8800000 ]
  [ cmp lte reg 1 0xc8af0000 ]

# ct expiration 33-45
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp gte reg 1 0xe8800000 ]
  [ cmp lte reg 1 0xc8af0000 ]

# ct expiration != 33-45
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp lt reg 1 0xe8800000 ]
  [ cmp gt reg 1 0xc8af0000 ]

# ct expiration != 33-45
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp lt reg 1 0xe8800000 ]
  [ cmp gt reg 1 0xc8af0000 ]

# ct expiration != 33-45
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ cmp lt reg 1 0xe8800000 ]
  [ cmp gt reg 1 0xc8af0000 ]

# ct expiration {33, 55, 67, 88}
__set%d test-ip4 3
__set%d test-ip4 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33, 55, 67, 88}
__set%d test-ip6 3
__set%d test-ip6 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33, 55, 67, 88}
__set%d test-inet 3
__set%d test-inet 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-ip4 7
__set%d test-ip4 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-ip6 7
__set%d test-ip6 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-inet 7
__set%d test-inet 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33, 55, 67, 88}
__set%d test-ip4 3
__set%d test-ip4 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33, 55, 67, 88}
__set%d test-ip6 3
__set%d test-ip6 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33, 55, 67, 88}
__set%d test-inet 3
__set%d test-inet 0
	element 000080e8  : 0 [end]	element 0000d6d8  : 0 [end]	element 000105b8  : 0 [end]	element 000157c0  : 0 [end]
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-ip4 7
__set%d test-ip4 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-ip6 7
__set%d test-ip6 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct expiration {33-55}
__set%d test-inet 7
__set%d test-inet 0
	element 00000000  : 1 [end]	element e8800000  : 0 [end]	element d9d60000  : 1 [end]
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d ]

# ct state {new,established, related, untracked}
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000008  : 0 [end]	element 00000002  : 0 [end]	element 00000004  : 0 [end]	element 00000040  : 0 [end]
ip test-ip4 output 
  [ ct load state => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct state {new,established, related, untracked}
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000008  : 0 [end]	element 00000002  : 0 [end]	element 00000004  : 0 [end]	element 00000040  : 0 [end]
ip6 test-ip6 output 
  [ ct load state => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct state {new,established, related, untracked}
__set%d test-inet 3
__set%d test-inet 0
	element 00000008  : 0 [end]	element 00000002  : 0 [end]	element 00000004  : 0 [end]	element 00000040  : 0 [end]
inet test-inet output 
  [ ct load state => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct direction {reply, original}
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000001  : 0 [end]	element 00000000  : 0 [end]
ip test-ip4 output 
  [ ct load direction => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct direction {reply, original}
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000001  : 0 [end]	element 00000000  : 0 [end]
ip6 test-ip6 output 
  [ ct load direction => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct direction {reply, original}
__set%d test-inet 3
__set%d test-inet 0
	element 00000001  : 0 [end]	element 00000000  : 0 [end]
inet test-inet output 
  [ ct load direction => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct status {expected, seen-reply, assured, confirmed, dying}
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000001  : 0 [end]	element 00000002  : 0 [end]	element 00000004  : 0 [end]	element 00000008  : 0 [end]	element 00000200  : 0 [end]
ip test-ip4 output 
  [ ct load status => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct status {expected, seen-reply, assured, confirmed, dying}
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000001  : 0 [end]	element 00000002  : 0 [end]	element 00000004  : 0 [end]	element 00000008  : 0 [end]	element 00000200  : 0 [end]
ip6 test-ip6 output 
  [ ct load status => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct status {expected, seen-reply, assured, confirmed, dying}
__set%d test-inet 3
__set%d test-inet 0
	element 00000001  : 0 [end]	element 00000002  : 0 [end]	element 00000004  : 0 [end]	element 00000008  : 0 [end]	element 00000200  : 0 [end]
inet test-inet output 
  [ ct load status => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark {0x32, 0x2222, 0x42de3}
__set%d test-ip4 3
__set%d test-ip4 0
	element 00000032  : 0 [end]	element 00002222  : 0 [end]	element 00042de3  : 0 [end]
ip test-ip4 output 
  [ ct load mark => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark {0x32, 0x2222, 0x42de3}
__set%d test-ip6 3
__set%d test-ip6 0
	element 00000032  : 0 [end]	element 00002222  : 0 [end]	element 00042de3  : 0 [end]
ip6 test-ip6 output 
  [ ct load mark => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark {0x32, 0x2222, 0x42de3}
__set%d test-inet 3
__set%d test-inet 0
	element 00000032  : 0 [end]	element 00002222  : 0 [end]	element 00042de3  : 0 [end]
inet test-inet output 
  [ ct load mark => reg 1 ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark {0x32-0x2222, 0x4444-0x42de3}
__set%d test-ip4 7
__set%d test-ip4 0
	element 00000000  : 1 [end]	element 32000000  : 0 [end]	element 23220000  : 1 [end]	element 44440000  : 0 [end]	element e42d0400  : 1 [end]
ip test-ip4 output 
  [ ct load mark => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark {0x32-0x2222, 0x4444-0x42de3}
__set%d test-ip6 7
__set%d test-ip6 0
	element 00000000  : 1 [end]	element 32000000  : 0 [end]	element 23220000  : 1 [end]	element 44440000  : 0 [end]	element e42d0400  : 1 [end]
ip6 test-ip6 output 
  [ ct load mark => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark {0x32-0x2222, 0x4444-0x42de3}
__set%d test-inet 7
__set%d test-inet 0
	element 00000000  : 1 [end]	element 32000000  : 0 [end]	element 23220000  : 1 [end]	element 44440000  : 0 [end]	element e42d0400  : 1 [end]
inet test-inet output 
  [ ct load mark => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ lookup reg 1 set __set%d 0x0 ]

# ct mark != 0x00000032-0x00000045
ip test-ip4 output 
  [ ct load mark => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x32000000 0x45000000 ]

# ct mark != 0x00000032-0x00000045
ip6 test-ip6 output 
  [ ct load mark => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x32000000 0x45000000 ]

# ct mark != 0x00000032-0x00000045
inet test-inet output 
  [ ct load mark => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0x32000000 0x45000000 ]

# ct expiration != 33-45
ip test-ip4 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xe8800000 0xc8af0000 ]

# ct expiration != 33-45
ip6 test-ip6 output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xe8800000 0xc8af0000 ]

# ct expiration != 33-45
inet test-inet output 
  [ ct load expiration => reg 1 ]
  [ byteorder reg 1 = hton(reg 1, 4, 4) ]
  [ range neq reg 1 0xe8800000 0xc8af0000 ]

